// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  id                String             @id @default(cuid())
  email             String             @unique
  name              String?
  password          String
  role              String             @default("USER")
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  
  // Relations
  exhibitAnalyses   ExhibitAnalysis[]
  tours            Tour[]
  
  @@map("users")
}

model AdminUser {
  id                String             @id @default(cuid())
  email             String             @unique
  password          String
  role              String             @default("ADMIN")
  isActive          Boolean            @default(true)
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  
  @@map("admin_users")
}

model Exhibit {
  id                String             @id @default(cuid())
  name              String
  description       String?
  location          String?
  category          String?
  imageUrl          String?
  isActive          Boolean            @default(true)
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  
  // Relations
  tourExhibits      TourExhibit[]
  
  @@map("exhibits")
}

model Tour {
  id                String             @id @default(cuid())
  name              String
  description       String?
  duration          Int?               // in minutes
  difficulty        String             @default("EASY")
  isActive          Boolean            @default(true)
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  
  // Relations
  userId            String
  user              User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  tourExhibits      TourExhibit[]
  
  @@map("tours")
}

model TourExhibit {
  id                String             @id @default(cuid())
  tourId            String
  exhibitId         String
  order             Int
  estimatedTime     Int?               // in minutes
  
  // Relations
  tour              Tour               @relation(fields: [tourId], references: [id], onDelete: Cascade)
  exhibit           Exhibit            @relation(fields: [exhibitId], references: [id], onDelete: Cascade)
  
  @@unique([tourId, exhibitId])
  @@map("tour_exhibits")
}

model VisitorAnalytics {
  id                String             @id @default(cuid())
  userId            String?
  page              String
  timeSpent         Int                // in seconds
  timestamp         DateTime           @default(now())
  userAgent         String?
  ipAddress         String?
  
  @@map("visitor_analytics")
}

model ExhibitAnalysis {
  id                  String   @id @default(cuid())
  userId              String
  originalText        String
  processedText       String
  confidence          Float
  processingTime      Int
  engineUsed          String
  imageMetadata       String   // JSON as string for SQLite
  preprocessingSteps  String   // JSON as string for SQLite
  languageZones       String   // JSON as string for SQLite
  detectedLanguages   String   // JSON as string for SQLite
  qualityScore        Float?
  trainingDataCollected Boolean @default(false)
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  user                User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("exhibit_analysis")
}

 